        TODO List

Plastic:
    - Utiliser nullptr
    - Passer a CMake
    - S'occuper de la documentation
    - Remplir le README
    - Passer à l'option -std=c++11

    - Revoir le Makefile, et supprimer les anciennes versions avant d'installer

    - Ajouter la gestion pour Win32
    
    - Utiliser delegating constructor une fois disponible


Demo:
    - Ajouter une démo contenant plusieurs techniques
    - Ajouter une démo de post-processing
    - Résoudre le bug du redimensionnement


Gui:
    - Ajouter Atom close a la fenetre
    - Reimplémenter
    - Choisir le nombre de bits pour red, green, blue and alpha dans l'initialisation
    - Implementer Context::makeCurrent()
    - Implémenter pour Win32
    - Ajouter le joystick
    

Graphics:
    - Ajouter une classe qui charge les extensions OpenGL
    - Implémenter SceneManager de façon basique
    

HardwareBuffer:
    - Renommer la classe
    - Déresponsabilisé de la classe Program
    - Separer VBO et VBO/IBO


Geometry:
    - Passer dans le core
    - Ajouter Axis Aligned Box
    - Chargement depuis une geometry skinnée

    - Ajouter la création d'une box et d'une geometry pour le post processing


Skeleton:
    - Implementer interpolate()


MediaManager:
    - Ajouter Geometry
    - Ajouter spécialisation de Loader<T> pour Image pour force le PixelFormat
    - Implémenter LoaderImageTGA pour RLE
    - Ajouter le chargement des images DDS
    
    - Optimiser le chargement des OBJ

Shader:
    - Ajouter Geometry Shader
    - Ajoutes shaders de la tesselation


Program:
    - Ajouter la gestion de la tesselation
    - Recupérer les out du fragement shader
    - Gestion Uniforn Buffer Object
    - Lors du test du type GLSL avec les textures, gaffe aux samplerShadow***

    - Lorsqu'on récupère les uniform la doc dis qu'on peut nous renvoyer les built-in "gl_", faire le tris


RenderTarget:
    - Voir si clear doit se retrouver implémenter en direct et non en virtual


RenderTexure:
    - Implémenter les vérifications


PixelFormat:
    - Ajouter les formats Depht et Stencil et DDS et donc mettre a jour GLEnum
    - Ajouter des formats flottants


GLEnum:
    - Utiliser les nouveaux types de OpenGL 4.2
    - Assertion pour empecher les erreurs dans GLEnum


Texture:
    - Ajouter le support pour 1DArray, 2DArray et CubeMapArray
    - Utiliser glTexStorage


Sampler:
    - Ajouter des options


XML:
    - Reimplémenter pour être memory-safe










- Système de texture:
    - Faire en sorte de charger les textures le moins de fois possible en utilisant des GL_TEXTURE0 + i, 
     en faisant varier i selon les possibilités de l'implementation OpenGL.
    - Lors du bind des textures, verifier que le sampler concorde au niveau des mipmaps et des filtres utilisés!!!
    - Pareil si on utilise un SamplerCompareMode voir si c'est une depth texture


